/*
 * Nimbella CONFIDENTIAL
 * ---------------------
 *
 *   2018 - present Nimbella Corp
 *   All Rights Reserved.
 *
 * NOTICE:
 *
 * All information contained herein is, and remains the property of
 * Nimbella Corp and its suppliers, if any.  The intellectual and technical
 * concepts contained herein are proprietary to Nimbella Corp and its
 * suppliers and may be covered by U.S. and Foreign Patents, patents
 * in process, and are protected by trade secret or copyright law.
 *
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Nimbella Corp.
 */

const bluebird = require("bluebird");
const nim = require('nim');

function main(params) {
    let keyPrefix = params.keyPrefix || 'key';
    let valuePrefix = params.valuePrefix || 'val';
    let startIndex = params.startIndex || 1;
    let count = params.count || 10;
    if (startIndex < 0) {
        return { payload: 'Please specify a positive value for startIndex' };
    }
    if (count < 0) {
        return { payload: 'Please specify a positive value for count' };
    }
    const redis = nim.redis();
    let keys = [], vals = [];
    for (let i = 0; i < count; i++) {
        keys[i] = keyPrefix + (i + startIndex);
        vals[i] = valuePrefix + (i + startIndex);
    }
    return bluebird.Promise.each(keys, (key, index, length) => {
        return redis.setAsync(key, vals[index]).catch(err => {console.log('Error setting key ' + key + ' to value ' + vals[index]);}); })
                             .then(() => {let lastIndex = startIndex + count - 1;
                                          return {payload: 'Set keys ' + keyPrefix + startIndex + ' through ' + keyPrefix + lastIndex +
                                                  ' to values ' + valuePrefix + startIndex + ' through ' + valuePrefix + lastIndex};});
}
