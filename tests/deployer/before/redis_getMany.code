/*
 * Nimbella CONFIDENTIAL
 * ---------------------
 *
 *   2018 - present Nimbella Corp
 *   All Rights Reserved.
 *
 * NOTICE:
 *
 * All information contained herein is, and remains the property of
 * Nimbella Corp and its suppliers, if any.  The intellectual and technical
 * concepts contained herein are proprietary to Nimbella Corp and its
 * suppliers and may be covered by U.S. and Foreign Patents, patents
 * in process, and are protected by trade secret or copyright law.
 *
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Nimbella Corp.
 */

const bluebird = require("bluebird");
const nim = require('nim');
const redis = nim.redis();

function main(params) {
    let keyPrefix = params.keyPrefix || 'key';
    let startIndex = params.startIndex || 1;
    let count = params.count || 10;
    if (startIndex < 0) {
        return { payload: 'Please specify a positive value for startIndex' };
    }
    if (count < 0) {
        return { payload: 'Please specify a positive value for count' };
    }
    let keys = [], vals = [];
    for (let i = 0; i < count; i++) {
        keys[i] = keyPrefix + (startIndex + i);
    }
    return bluebird.Promise.each(keys, (key, index, length) => {
        return redis.getAsync(key).then(val => {vals[index] = val;})
                                  .catch(err => {vals[index] = err;}); })
                            .then(() => {return {payload: vals};});
}
