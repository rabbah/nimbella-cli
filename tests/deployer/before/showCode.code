/*
 * Nimbella CONFIDENTIAL
 * ---------------------
 *
 *   2018 - present Nimbella Corp
 *   All Rights Reserved.
 *
 * NOTICE:
 *
 * All information contained herein is, and remains the property of
 * Nimbella Corp and its suppliers, if any.  The intellectual and technical
 * concepts contained herein are proprietary to Nimbella Corp and its
 * suppliers and may be covered by U.S. and Foreign Patents, patents
 * in process, and are protected by trade secret or copyright law.
 *
 * Dissemination of this information or reproduction of this material
 * is strictly forbidden unless prior written permission is obtained
 * from Nimbella Corp.
 */
const openwhisk = require('openwhisk');

// A web action that obtains the code of another web-action (when permitted) and returns it as web content.
// Expected usage scenario is that playground user publishes an action and wants to also show the code publically.
function main(args) {
    let action = args['__ow_path'].slice(1)
    let wsk = openwhisk({ignore_certs: args.__ignore_certs}) // ignores self-signed certs, necessary in some deployments
    console.log("fetching action", action)
    return wsk.actions.get(action).then(result => {
        console.log('got user action')
        console.log(result)
        return showResponse(result)
    }).catch(err => {
      console.error('error retrieving action', err)
      return showError(err)
    })
}

// Analyze result of a successful 'actions.get to see if it's ok to show the code.   If so, return the code.
// If not, return a not-authorized response.
function showResponse(result) {
    const annotations = result.annotations
    console.log("annotations", annotations)
    let exported = false
    let granted = false
    if (Array.isArray(annotations)) {
        annotations.forEach(annot => {
            if (annot['key'] == 'web-export') {
                exported = annot['value'] === true
            } else if (annot['key'] == 'show-code') {
                granted = annot['value'] === true
            }
        })
    } else {
        console.log("annotations not present or not an array")
    }
    console.log("exported", exported, "granted", granted)
    if (exported && granted) {
        const exec = result.exec
        if (exec && exec.code) {
            const type = findMimeType(exec.kind)
            return success(exec.code, type)
        } else {  // TODO: can this happen and what's the right handling?
            console.log("Permissions ok but code not found")
            return success("", 'text/plain')
        }
    } else {
        return notAuthorized()
    }
}

// Find the correct mimetype for code based on the "exec kind".  Note: not all languages correspond to official mimetypes.
function findMimeType(execKind) {
    if (execKind.startsWith('nodejs:')) {
        return 'application/javascript'
    } else {
        return 'text/plain'
    }
}

// Wrap code in the trappings of success
function success(code, type) {
    return { statusCode: 200, headers: { 'Content-type': type }, body: code }
}

// Indicate permission failure
function notAuthorized() {
    return { statusCode: 403, body: "You do not have permission to see that"}
}

// Indicate some error occurred.  The most common one would be that the action does not exist.  Others are assumed to be internal errors
function showError(err) {
    let statusCode, message
    if (err.statusCode == 404) {
        statusCode = 404
        message = "The action you requested to see does not exist"
    } else {
        statusCode = 500
        message = err.message
    }
    return { statusCode: statusCode, body: message }
}
