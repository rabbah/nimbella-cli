#
# Nimbella CONFIDENTIAL
# ---------------------
#
#   2018 - present Nimbella Corp
#   All Rights Reserved.
#
# NOTICE:
#
# All information contained herein is, and remains the property of
# Nimbella Corp and its suppliers, if any.  The intellectual and technical
# concepts contained herein are proprietary to Nimbella Corp and its
# suppliers and may be covered by U.S. and Foreign Patents, patents
# in process, and are protected by trade secret or copyright law.
#
# Dissemination of this information or reproduction of this material
# is strictly forbidden unless prior written permission is obtained
# from Nimbella Corp.
#

# This tests remote builds

SELFDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
DEMODIR="$SELFDIR/../../../demo-projects"
MAINDIR="$SELFDIR/../../../main"
cd $SELFDIR

# Deploy a project containing a test action, then invoke that action and verify the answer
# We support only answers with a simple string in the `body` element.
function testAction() {
  local project=$1
  local action=$2
  local expected=$3
  nim namespace clean --force --justwhisk
  nim project deploy $project --remote-build
  RESULT=$(nim action invoke $action | jq -r .body)
  if [ "$RESULT" != "$expected" ]; then
     echo "Expected '$expected' but got '$RESULT'"
     exit 1
  fi
}

# Test that the code of an action is binary.  With some action-loop runtimes
# (go, swift, java) this is a valid test of whether building occurred and is needed
# since the action-loop would have given a correct answer even if the unbuilt
# code was deployed.
function testBinary() {
  local action=$1
  BINARY=$(nim action get $action | jq -r .exec.binary)
  if [ "$BINARY" != "true" ]; then
     echo "Action '$action' should be binary but isn't"
     exit 1
  fi
}

# Test that a qr action can be invoked and returns an image
function testQr() {
  local action=$1
  RESULT=$(nim action invoke $action -p text foobar | jq -r .body)
	if [[ "$RESULT" != *"data:image/png"* ]]; then
		 echo "Action '$action' did not return an image"
	fi
}

set -e

# Run the tests for simple action-only cases

# golang default (1.15)
rm -f go/project.yml
testAction go hello "Hello, stranger!"
testBinary hello

# golang 1.12
echo "packages:" > go/project.yml
echo "  - name: default" >> go/project.yml
echo "    actions:" >> go/project.yml
echo "      - name: hello" >> go/project.yml
echo "        runtime: 'go:1.12'" >> go/project.yml
testAction go hello "Hello, stranger!"
testBinary hello

# swift single source file
testAction swift hello "To be implemented"
testBinary hello

# swift multiple source file setup
testAction swift-multi hello "Hello stranger!"
testBinary hello

# java (not using mvn or gradle ... those cases are tested by qrcode)
testAction java hello "Hello stranger!"
testBinary hello

# Deploy some of our demos and test for failures

# qrcode, both actions, using mvn for the java one
nim namespace clean --force --justwhisk
rm -fr qrcode
cp -r $DEMODIR/qrcode .
nim project deploy qrcode --remote-build
testQr qr
testBinary qr
testQr qr-java
testBinary qr-java

# qrcode, java action only, using gradle this time
nim namespace clean --force --justwhisk
rm -fr qrcode
cp -r $DEMODIR/qrcode .
THE_BUILD=qrcode/packages/default/qr-java/build.sh
sed -e 's/BUILD="maven"/BUILD="gradle"/g' <  $THE_BUILD > _build_
chmod +x _build_
mv _build_ $THE_BUILD
nim project deploy qrcode --remote-build --include default/qr-java
testQr qr-java
testBinary qr-java

# the chat demo (exercises web builds as well as actions)
nim namespace clean --force --justwhisk
rm -fr chat
cp -r $DEMODIR/chat .
nim project deploy chat --remote-build
RESULT=$(nim action invoke chatroom/getMessages | jq -r .returnCode)
if [ "$RESULT" != "0" ]; then
	 echo "chatroom/getMessages did not respond as expected"
	 exit 1
fi
RESULT=$(nim web get index.html)
if [[ "$RESULT" != *"Nimbella Chatroom"* ]]; then
	 echo "chatroom web content does not appear correct"
	 exit 1
fi

# TODO other runtimes (esp. python and php)

echo "Test succeeded"
